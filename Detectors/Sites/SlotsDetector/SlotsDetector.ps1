param([string]$resourceToProcess, [string]$currDetectorName) #Must be the first statement in the script

<#

1. No individual Detector should take more than a few minutes to complete. It runs a risk of being terminated if it runs for a long time
Timeout for a Site detector is 6 minutes and for an ASP detector is 10 minutes

2. As a rule of thumb, if you are downloading any file that you need for your detector to function, download it in the Sites directory respresnted by $resourceToProcess instead of the directory in which your Detectory resides.
You may choose to clean up / leave the downloaded data as is. Just in case any other detectory needs it, it will already have it there.
Simillarly, if you need a file downloaded / some data, check for its presence. Chances are, some other detector might have already done the work for you


3. $resourceToProcess will have input in the following format
    C:\Projects\AntaresBestPracticeAnalyzer-Windows\Output\da511dea-6e00-4728-93ff-6302ad7fe284\Sites\da511dea-6e00-4728-93ff-6302ad7fe284_nmallickWebAppRG_nmallick1

4. Once done with the detector logic, create a file with the following naming convention and place it in the same folder as $resourceToProcess
    DetectorName.out.

    For e.g. If the detector's name is SlotsDetector, the output file generated by this detector should be SlotsDetector.out and should be placed at $resourceToProcess +"\SlotsDetector.out".
    $detectorOutputFile valiable already creates the complete file path for you.

    The output file should contain and output in the following JSON format

    {
    "SubscriptionId": "This should be the Subscription ID under which the current site resides",
    "ResourceGroupName": "This should be the resource grop name under which the current site resides",
    "ResourceName": "This should be either the name of the webapp or ASP that the detector is currently processing",
    "Kind": "Make sure value is one out of SiteDector | ASPDetector",
    "DetectorName": "SlotsDetector",
    "Author": "Feel free to addd your name and/or email address or simply state Anonymous"
    "Description": "In short, state which best practice does your detector checks against",
    "Result":{
        "Value": "Make sure value is one out of Pass | Fail | Warning",
        "Details": "Any string decribing what is the conclusion of your detector",
        "Recommendation": "What is your recommendation for this site and why",
        "AdditionalInfo":"Anything else that you want to point out goes here"
        }
    }

5. Add a small description of what your detector checks for / which best practice is it trying to look for in the corresponding ReadMe.txt. It will help people understand the intent of this detector
#>


$detectorOutputFile = $resourceToProcess + "\" + $currDetectorName  + ".out"

if(Test-Path -Path $detectorOutputFile){
    #Output for this detector already exists. Must have been trigerred due to some bug / error. Do not run the logic again
    return
}

$temp = $resourceToProcess.Split('\')[$resourceToProcess.Split('\').Length-1]

$subscriptionId = $temp.Split('_')[0]
$resourceGroup = $temp.Split('_')[1]
$siteName = $temp.Split('_')[2]

#The complete path of the JSON file for this resource is $resourceToProcess + "\" + $settingsFileName
$settingsFileName = $siteName + ".json"

#region Code for your detector goes here

    $slotsInfoUrl = "/subscriptions/" + $subscriptionId  + "/resourceGroups/" + $resourceGroup + "/providers/Microsoft.Web/sites/" + $siteName + "/slots/?api-version=2016-08-01" 

    $slotsInfoJSON = ARMClient.exe get $slotsInfoUrl
    $slotsInfo = $slotsInfoJSON | ConvertFrom-Json

    If($slotsInfo.value.Count -lt 1){
        #No slots are present. The state of this detector is a Fail
        $detectorResult = @{
         'Value'='Fail';
         'Details'="No slots detected under this site";
         'Recommendation'='Please create a slot under this site and always deploy code against the slot to ensure your production is not disrupted when releasing new code. Once you are done with your deployment, use Swap with Preview to swap the latest code into production';
         'AdditionalInfo'=''
         }
    }
    else
    {
        #Atleast one slot is present. The state of this detector is a Pass. Just remind them to always deploy to this slot.
         $detectorResult = @{
         'Value'='Pass';
         'Details'=('Found ' + $slotsInfo.value.Count +  ' slot(s) for this site');
         'Recommendation'='Always deploy code against a slot to ensure your production is not disrupted when releasing new code. After a deployment, use Swap with Preview to swap the latest code into production';
         'AdditionalInfo'=''
         }
    }


#endregion


#region Generating output for the detector
$outputObj = New-Object System.Object
$outputObj  | Add-Member -MemberType NoteProperty -Name SubscriptionId -Value $subscriptionId
$outputObj  | Add-Member -MemberType NoteProperty -Name ResourceGroupName -Value $resourceGroup
$outputObj  | Add-Member -MemberType NoteProperty -Name ResourceName -Value $siteName
$outputObj  | Add-Member -MemberType NoteProperty -Name Kind -Value "SiteDetector"
$outputObj  | Add-Member -MemberType NoteProperty -Name DetectorName -Value $currDetectorName
$outputObj  | Add-Member -MemberType NoteProperty -Name Author -Value "Nazeef Mallick (nmallick@microsoft.com)"
$outputObj  | Add-Member -MemberType NoteProperty -Name Description -Value "Always deploy new code against a slot."
$outputObj  | Add-Member -MemberType NoteProperty -Name Result -Value $detectorResult




#Create a placeholder file
New-Item -ItemType File -Path $detectorOutputFile -Force >$null

#Write the properties of this website into its corresponding file
$outputObj | ConvertTo-Json | Out-File -FilePath $detectorOutputFile -Append  -Force
#endregion
